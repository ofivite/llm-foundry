data_local: ./my-copy-c4
data_remote:  # If blank, files must be present in data_local
max_seq_len: 2048
global_seed: 17

# Run Name
run_name:  # If left blank, will be read from env var $RUN_NAME

# Model
model:
  name: mpt_causal_lm
  init_device: meta
  d_model: 768
  n_heads: 12
  n_layers: 12
  expansion_ratio: 4
  max_seq_len: ${max_seq_len}
  vocab_size: 50368
  tie_word_embeddings: true
  logit_scale: ${eval:'1 / ${.mup_config.d_model_ratio}'}
  attn_config:
    attn_impl: triton
    softmax_scale: ${eval:'${..mup_config.d_heads_base}**0.5 / (${..d_model} / ${..n_heads})'} # NB: can optionally multiple by ${..mup_config.d_heads_base}**0.5, to be compatible with base model
  init_config:
    name: baseline_
    _init_std: ??? # HP value to be tuned
    init_std: ${eval:'${._init_std} / ${..d_model}**0.5'} # NB: we can do muP scaling like this only in tied case, when Linear layers = matrix-like params
    init_div_is_residual: True
    emb_init_std: ${eval:'${._init_std} / ${..mup_config.d_model_base}**0.5'}
    emb_init_uniform_lim: None
  mup_config: 
    d_model_base: ???
    n_heads_base: ${..n_heads}
    d_heads_base: ${eval:'${.d_model_base} / ${.n_heads_base}'}
    d_model_ratio: ${eval:'${..d_model} / ${.d_model_base}'} 
    matrix_like_params:
      - param_str_match: attn.Wqkv.weight
        lr: ${eval:'${optimizer.lr} / ${model.mup_config.d_model_ratio}'}
      - param_str_match: attn.out_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model.mup_config.d_model_ratio}'}
      - param_str_match: ffn.up_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model.mup_config.d_model_ratio}'}
      - param_str_match: ffn.down_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model.mup_config.d_model_ratio}'}

# Tokenizer
tokenizer:
  name: EleutherAI/gpt-neox-20b
  kwargs:
    model_max_length: ${max_seq_len}

# Dataloaders
train_loader:
  name: text
  dataset:
    local: ${data_local}
    remote: ${data_remote}
    split: train
    shuffle: true
    max_seq_len: ${max_seq_len}
    shuffle_seed: ${global_seed}
  drop_last: true
  num_workers: 8

eval_loader:
  name: text
  dataset:
    local: ${data_local}
    remote: ${data_remote}
    split: val
    shuffle: false
    max_seq_len: ${max_seq_len}
    shuffle_seed: ${global_seed}
  drop_last: false
  num_workers: 8

# Optimization
scheduler:
  name: cosine_with_warmup
  t_warmup: 100ba
  alpha_f: 0.1

optimizer:
  name: decoupled_adamw
  lr: 6.0e-4
  betas:
  - 0.9
  - 0.95
  eps: 1.0e-08
  weight_decay: 0.0
  param_groups: ${model.mup_config.matrix_like_params}

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 4800ba  # ~ 2.5B tokens
eval_interval: 500ba
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: ??? # 256

# System
seed: ${global_seed}
device_eval_batch_size: 16
device_train_microbatch_size: 16
# device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: false
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}
  optimizer_monitor:
    batch_log_interval: 1
  mup_monitor:
    batch_log_interval: 1
  activation_monitor:
    interval: 1ba
    only_log_wandb: false

loggers:
  mlflow: {}
    experiment_name: mpt-125m-test

save_overwrite: true
# save_num_checkpoints_to_keep: 1

# Checkpoint to local filesystem or remote object store
# save_interval: 500ba
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
# save_folder: ./{run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints

# Load from local filesystem or remote object store
# load_path: ./gpt-125m/checkpoints/latest-rank{rank}.pt
# load_path: s3://my-bucket/my-folder/gpt-125m/checkpoints/latest-rank{rank}.pt
